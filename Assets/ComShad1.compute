#pragma kernel CSAddSand
#pragma kernel CSFallSand
#pragma kernel CSTransformToTexture
#pragma kernel CSAddPlanet
#pragma kernel CSCaptureArea
#pragma kernel CSConvertTextureToParticles

/*
 * Particle types:
 * 100: stone
 * 101: dirt
 * 102: sand
 * 103: water
 */

struct Particle {
    float4 color;
    float2 velocity;
    uint type;  // 0 for empty, 1 for sand, etc.
    int stickyToId; // 0 for stay, 1 for fall
    uint mass;
    float2 position;
    int3 neighbor;
    uint pressure;
    uint falling;
    float glowIntensity;
    uint lastUpdateFrame;
    uint availableSlideFrames;
};

RWStructuredBuffer<Particle> Particles;
RWTexture2D<float4> ResultTexture;

RWTexture2D<float4> AreaTexture;
float4 areaToCapture;
RWTexture2D<float4> InputTexture;
uint2 PastePosition;
uint2 AreaSize;

float2 mousePos;
uint _Width;
uint _Height;

uint _CurrentFrame;
float _DecayRate;

float2 gravityPoint = float2(200, 200);
float gravityStrength = 2;
float dt;
//const float G = 7 * 10 * 1000 * 2;
const float minG = 7 * 10 * 100;
const uint limit = 500;

uint _planetCount;

struct Planet {
    uint id;
    float2 pos;
    uint mass;
    uint active;
};

RWStructuredBuffer<Planet> planets;
RWStructuredBuffer<uint> rngs;
RWStructuredBuffer<int> pressureIndices;
uint _rngCount;



// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
/*
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float2 Random(uint seed) {
    uint hashedSeed = Hash(seed);
    float randomValue = float(hashedSeed) / 4294967295.0; // 2^32-1
    return float2(randomValue, hashedSeed); // Return random value and new seed
}

void rerollRNGs(uint2 id) {
    uint seed = id.x + id.y * _Width;
    for (int i = 0; i < _rngCount; i++) {
        float2 result = Random(seed);
        rngs[i] = result.x; // Store the random value
        seed = uint(result.y); // Update the seed for the next iteration
    }
}*/

/*
*struct Particle {
    float4 color;
    float2 velocity;
    uint type;  // 0 for empty, 1 for sand, etc.
    int stickyToId; // 0 for stay, 1 for fall
    uint mass;
    float2 position;
    int n1, n2, n3;
    uint pressure;
};
 */
Particle nothing() {
    Particle p;
    p.color = float4(0,0,0,1);
    p.velocity = float2(0,0);
    p.type = 0;
    p.stickyToId = -1;
    p.mass = 0;
    p.position = float2(-1,-1);
    p.neighbor = int3(-1,-1,-1);
    p.pressure = 0;
    p.falling = 0;
    p.glowIntensity = 0.0;
    p.lastUpdateFrame = 0;
    p.availableSlideFrames = 0;
    return p;
}

Particle matter() {
    Particle p;
    p.color = float4(1,1,1,1);
    p.velocity = float2(0,0);
    p.type = 1;
    p.stickyToId = -1;
    p.mass = 1;
    p.position = float2(-1,-1);
    p.neighbor = int3(-1,-1,-1);
    p.pressure = 0;
    p.falling = 0;
    p.glowIntensity = 1.0;
    p.lastUpdateFrame = 0;
    p.availableSlideFrames = 0;
    return p;
}

void generateSurface(uint2 id, Planet planet, int2 pos) {
    int2 offset = id.xy - pos;
    uint index = id.y * _Width + id.x;

    if (dot(offset, offset) <= (int) planet.mass) {
        Particle p = matter();
        p.stickyToId = planet.id;
        p.type = 2;
        p.color = float4(1, 0, 0, 1);
        p.position = id.xy;
        p.mass = 1;
        p.pressure = 0;
        Particles[index] = p;
    }
}

/*
[numthreads(8, 8, 1)]
void CSConvertTextureToParticles(uint3 id : SV_DispatchThreadID) {
    uint2 texCoord = id.xy;
    uint2 bufferCoord = texCoord + PastePosition;

    // Check if bufferCoord is within the bounds of the particle buffer
    if (bufferCoord.x < _Width && bufferCoord.y < _Width) {
        const uint bufferIndex = bufferCoord.y * _Width + bufferCoord.x;
        uint index = id.y * _Width + id.x;
        //const float4 color = AreaTexture.Load(int3(texCoord, 0));//InputTexture.Load(int3(texCoord, 0));
        Particle p = matter();
        p.color = AreaTexture[id.xy];
        p.position = float2(texCoord.x, texCoord.y);
        p.type = 0;
        Particles[bufferIndex] = p;
    }
}*/

[numthreads(8, 8, 1)]
void CSConvertTextureToParticles(uint3 id : SV_DispatchThreadID) {
    uint2 texCoord = id.xy;
    uint2 bufferCoord = texCoord + PastePosition;

    // Check if bufferCoord is within the bounds of the particle buffer
    if (bufferCoord.x < _Width && bufferCoord.y < _Width) {
        const uint bufferIndex = bufferCoord.y * _Width + bufferCoord.x;
        uint index = id.y * _Width + id.x;
        const float4 color = InputTexture[id.xy].xyzw;//InputTexture.Load(int3(texCoord, 0));
        Particle p = matter();
        p.color = color;//AreaTexture.Load(int3(texCoord, 0));//AreaTexture[id.xy];
        p.position = float2(texCoord.x, texCoord.y);
        p.type = 0;
        Particles[bufferIndex] = p;
    }
}

[numthreads(8, 8, 1)]
void CSCaptureArea(uint3 id : SV_DispatchThreadID) {
    const uint index = (uint(areaToCapture.y) + id.y) * _Width + (uint(areaToCapture.x) + id.x);
    if (id.x < uint(areaToCapture.z) && id.y < uint(areaToCapture.w)) {
        const Particle current = Particles[index];
        AreaTexture[id.xy] = current.color;
    }
}

int candidate;

[numthreads(1, 1, 1)]
void CSAddPlanet(uint2 id : SV_DispatchThreadID) {
    planets[candidate].mass = 300;
    planets[candidate].active = 1;
    planets[candidate].pos = mousePos;
    planets[candidate].id = candidate;

    generateSurface(id, planets[candidate], mousePos);
}

/*
 * TODO: make particles with high mass sink into the center over time. (Maybe use a weighted grid with A*?)
 */

[numthreads(1, 1, 1)]
void CSAddPlayer (uint3 id : SV_DispatchThreadID) {
    planets[0].mass = 32;
    planets[0].pos = float2(200, 200);

    //and now generate particles around
}

[numthreads(1, 1, 1)]
void CSAddSand (uint3 id : SV_DispatchThreadID) {
    int2 offset = id.xy - (int2)mousePos;
    uint index = id.y * _Width + id.x;
    if (dot(offset, offset) <= 30) {
        Particles[index].type = 1;
        Particles[index].color = float4(1, 0, 0, 1);
        float x = mousePos.x / 200;
        float y = mousePos.y / 200;
        if (mousePos.x < 200) x = -1;
        Particles[index].velocity = float2(1, 0);
        Particles[index].position = float2(0, 0);
        Particles[index].mass = 1;
    }
}

Particle copy(const Particle old) {
    Particle p;
    p.color = old.color;
    p.velocity = old.velocity;
    p.type = old.type;
    p.stickyToId = old.stickyToId;
    p.mass = old.mass;
    p.position = old.position;
    p.neighbor = old.neighbor;
    p.pressure = old.pressure;
    p.falling = old.falling;
    p.glowIntensity = old.glowIntensity;
    p.lastUpdateFrame = old.lastUpdateFrame;
    p.availableSlideFrames = old.availableSlideFrames;
    return p;
}
/*Particle copy(Particle old) {
    Particle other;
    other.color = old.color;
    other.velocity = old.velocity;
    other.position = old.position;
    other.type = old.type;
    other.mass = old.mass;
    other.stickyToId = old.stickyToId;
    other.

    return other;
}*/
/*
Particle free(Particle old) {
    Particle other;
    other.color = float4(0,1,0,1);
    other.velocity = old.velocity;
    other.position = old.position;
    other.type = 1;
    other.mass = old.mass;
    other.stickyToId = -1;

    return other;
}*/
Particle free(Particle old) {
    Particle p = matter();
    p.color = float4(0,1,0,1);
    p.velocity = old.velocity;
    p.position = old.position;
    return p;
}

bool same(Particle p1, Particle p2) {
    float epsilon = 0.0001; // Adjust this value based on your precision requirements
    if (abs(p1.position.x - p2.position.x) < epsilon && abs(p1.position.y - p2.position.y) < epsilon) {
        return true;
    }
    return false;
}


void CalculateCraterAndApplyImpulse(float2 impactPoint, float2 impactVelocity, float particleMass)
{
    // Calculate the crater radius based on the kinetic energy
    float k = 0.1; // Tweak this value as needed
    float KE = 0.5 * particleMass * dot(impactVelocity, impactVelocity); // Kinetic energy
    float craterRadius = k * sqrt(KE);

    // Define the bounds for our search space (a square around the impact point)
    int2 start = impactPoint - craterRadius;
    int2 end = impactPoint + craterRadius;

    for (int y = start.y; y < end.y; y++)
    {
        for (int x = start.x; x < end.x; x++)
        {
            // Calculate the distance from the current point to the impact point
            float distance = length(float2(x, y) - impactPoint);

            // Only affect particles inside the circular crater radius
            if (distance <= craterRadius)
            {
                uint index = y * _Width + x;
                Particle p = Particles[index];

                // Check if the particle is part of the planet we are impacting
                if (p.stickyToId != -1)
                {
                    // Identify surface particle (Check neighboring particles for an empty space)
                    bool isSurface =
                        (Particles[index - 1].stickyToId != -1) ||
                        (Particles[index + 1].stickyToId != -1) ||
                        (Particles[index - _Width].stickyToId != -1) ||
                        (Particles[index + _Width].stickyToId != -1);

                    if (isSurface)
                    {
                        // Apply impulse based on impact direction
                        float2 impulseDirection = normalize(impactVelocity);
                        p.velocity += impulseDirection; // Modify this for desired impulse magnitude

                        // Mark the particle as free
                        p.stickyToId = -1;
                    }
                }
            }
        }
    }
}

int signum(int x)
{
    return (x > 0) ? 1 : (x < 0) ? -1 : 0;
}

int2 bresenham(int2 start, int2 end)
{
    int startX = start.x, startZ = start.y, endX = end.x, endZ = end.y;
    int x, z, t, dx, dz, incx, incz, pdx, pdz, ddx, ddz, deltaslowdirection, deltafastdirection, err;
    dx = endX - startX;
    dz = endZ - startZ;
    incx = signum(dx);
    incz = signum(dz);
    if (dx < 0) dx = -dx;
    if (dz < 0) dz = -dz;
    bool xFaster = dx > dz;
    if (xFaster) {
        pdx = incx; pdz = 0;
        ddx = incx; ddz = incz;
        deltaslowdirection = dz;
        deltafastdirection = dx;
    } else {
        pdx = 0; pdz = incz;
        ddx = incx; ddz = incz;
        deltaslowdirection = dx;
        deltafastdirection = dz;
    }

    x = startX;
    z = startZ;
    err = deltafastdirection / 2;

    for (t = 0; t < deltafastdirection; ++t) {
        err -= deltaslowdirection;
        if(err < 0) {
            err += deltafastdirection;
            int xNew = x + ddx;
            int zNew = z + ddz;
            x = xNew;
            z = zNew;
        } else {
            x += pdx;
            z += pdz;
        }
        //blockPosList.add(new BlockPos(x, y, z));
        Particle p = Particles[z * _Width + x];
        if (p.stickyToId == -1)
            return int2(x, z);

    }
    return int2(-0,-0);
}

int2 bresenham2D(int2 start, int2 end, int2 center)
{
    int startX = start.x, startZ = start.y, endX = end.x, endZ = end.y;
    int x, z, t, dx, dz, incx, incz, pdx, pdz, ddx, ddz, deltaslowdirection, deltafastdirection, err;
    dx = endX - startX;
    dz = endZ - startZ;
    incx = signum(dx);
    incz = signum(dz);
    if (dx < 0) dx = -dx;
    if (dz < 0) dz = -dz;
    bool xFaster = dx > dz;
    if (xFaster) {
        pdx = incx; pdz = 0;
        ddx = incx; ddz = incz;
        deltaslowdirection = dz;
        deltafastdirection = dx;
    } else {
        pdx = 0; pdz = incz;
        ddx = incx; ddz = incz;
        deltaslowdirection = dx;
        deltafastdirection = dz;
    }

    x = startX;
    z = startZ;
    err = deltafastdirection / 2;

    for (t = 0; t < deltafastdirection; ++t) {
        err -= deltaslowdirection;
        if(err < 0) {
            err += deltafastdirection;
            int xNew = x + ddx;
            int zNew = z + ddz;
            x = xNew;
            z = zNew;
        } else {
            x += pdx;
            z += pdz;
        }

        const int2 curr = int2(x, z);
        int2 result = bresenham(curr, center);

        if (result.x != -0 && result.y != -0)
            return result;
    }
    return int2(-0,-0);
}

Particle findStickyNeightbour(uint index) {
    Particle p;
    p = Particles[index - 1];
    if (p.stickyToId != -1)
        return p;
    p = Particles[index + 1];
    if (p.stickyToId != -1)
        return p;
    p = Particles[index - _Width];
    if (p.stickyToId != -1)
        return p;
    p = Particles[index + _Width];
    if (p.stickyToId != -1)
        return p;

    return Particles[index];
}

bool hasStickyNeighbor(uint index) {
    Particle p;
    p = Particles[index - 1];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index + 1];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index - _Width];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index + _Width];
    if (p.stickyToId != -1)
        return true;

    return false;
}

// returns index
uint2 freeSpaceTowards(uint x, uint y, int2 target) {
    const uint index = y * _Width + x;
    //const Particle current = Particles[index];
    const float currDist = distance(target, uint2(x,y));

    Particle p;
    p = Particles[index - 1];
    if (p.stickyToId == -1 && distance(target, p.position) <= currDist)
        return uint2(x - 1, y);
    p = Particles[index + 1];
    if (p.stickyToId == -1 && distance(target, p.position) <= currDist)
        return uint2(x + 1, y);
    p = Particles[index - _Width];
    if (p.stickyToId == -1 && distance(target, p.position) <= currDist)
        return uint2(x, y - 1);
    p = Particles[index + _Width];
    if (p.stickyToId == -1 && distance(target, p.position) <= currDist)
        return uint2(x, y + 1);

    //TODO: z.B. x=0 - 1 fälle nicht abgedeckt

    return index;
}

int closerStuff(const int2 from, const int xoffset, const int yoffset) {
    int2 free1 = int2(from.x+xoffset, from.y+yoffset);
    const uint index = free1.y * _Width + free1.x;
    const Planet planet = planets[index];
    const int2 to = planet.pos;
    float oldDist = distance(from, to);
    float newDist = distance(free1, to);
    if (Particles[index].stickyToId != -1 && newDist < oldDist) {
        //Particles[index].color = float4(0,0,1,1);
        //Particles[index].color += float4(0, 0, 1, 1);
        return index;
    }
    return -1;
}

int4 getCloserStuff(const int2 from) {//int4x4 getCloserStuff(const int2 from) {
    int4 result = int4(-1,-1,-1,-1);
    //int4x4 result = int4x4(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1);
    int l = 2;
    for (int i=l; i>=-l; i--) {
        for (int j=l; j>=-l; j--) {
            //const int currIndex = (i+l) * (2l + 1) + (j+l);

            const int index = closerStuff(from, i, j);
            if (index > -1) {
                //result[i+l][j+l] = index;

                if (result[0] == -1){
                    //Particles[index].color = float4(0,0,1,1);
                    //Particles[index].color += float4(0, 0, 1, 1);
                    result[0] = index;
                } else if (result[1] == -1){
                    //Particles[index].color = float4(0,0,1,1);
                    //Particles[index].color += float4(0, 0, 1, 1);

                    result[1] = index;
                } else if (result[2] == -1) {
                    //Particles[index].color = float4(0,0,1,1);
                    //Particles[index].color += float4(0, 0, 1, 1);

                    result[2] = index;
                } else if (result[3] == -1) {
                    //Particles[index].color = float4(0,0,1,1);
                    //Particles[index].color += float4(0, 0, 1, 1);

                    result[3] = index;
                    return result;
                }
            }
        }
    }
    return result;
}

void evalPressure(const int neighborIndex, const uint index) {
    if (neighborIndex > -1) {
        Particle p = Particles[neighborIndex];
        p.pressure = max(p.pressure, 1 + Particles[index].pressure);
        if (p.pressure > limit) p.falling = 1;
        Particles[index].falling *= p.falling;
        Particles[neighborIndex] = p;
    }
}

//pressure inverse T form of neighbors with higher distance
void updatePressure(const uint index) {
    Particle current = Particles[index];
    /*const uint n1 = current.n1;
    const uint n2 = current.n2;
    const uint n3 = current.n3;
    Particle p1 = nothing();
    Particle p2 = nothing();
    Particle p3 = nothing();
    if (n1 > -1) p1 = Particles[n1];
    if (n2 > -1) p2 = Particles[n2];
    if (n3 > -1) p3 = Particles[n3];*/

    //current.pressure = 1 + p1.pressure + p2.pressure + p3.pressure;
    //p1.pressure = 1 + current.pressure;

    if (current.pressure > 50)
    {
        current.color = float4(1, 0, 0, 1);
        current.falling = 1;
    } else
    {
        current.color = float4(1, 1, 1, 1);
        current.falling = 0;
    }

    //current.color = float4(0.1, 0.1, 0, 1);
    //const int3 neighborIndices = getCloserStuff(current.position);
    const int4 neighborIndices = getCloserStuff(current.position);
    //if (neighborIndices.x == -1 && neighborIndices.y == -1 && neighborIndices.z == -1) current.color = float4(1, 1, 1, 1);


    for (int i = 0; i < 4; i++) {
        const int flatIndex = i;
        int row = flatIndex / 4;
        int column = flatIndex % 4;

        //if (neighborIndices[row][column] == -1) break;
        //evalPressure(neighborIndices[row][column], index);

        if (neighborIndices[flatIndex] == -1) break;
        evalPressure(neighborIndices[flatIndex], index);
    }
    /*
    if (neighborIndices.x > -1) {
        Particle p1 = Particles[neighborIndices.x];
        p1.pressure = max(p1.pressure, 1 + current.pressure);
        //current.color = float4(1, 1, 1, 1);
        if (p1.pressure > limit) p1.falling = 1;
        current.falling *= p1.falling;
        //p1.color += float4(0, 0, p1.pressure / 128, 1);
        //p1.color += float4(0, 0, 0.1, 1);
        Particles[neighborIndices.x] = p1;
    }
    if (neighborIndices.y > -1) {
        Particle p2 = Particles[neighborIndices.y];
        p2.pressure = max(p2.pressure, 1 + current.pressure);
        if (p2.pressure > limit) p2.falling = 1;
        current.falling *= p2.falling;
        //p2.color += float4(0, 0, 0.1, 1);
        Particles[neighborIndices.y] = p2;
    }
    if (neighborIndices.z > -1) {
        Particle p3 = Particles[neighborIndices.z];
        p3.pressure = max(p3.pressure, 1 + current.pressure);
        if (p3.pressure > limit) p3.falling = 1;
        current.falling *= p3.falling;
        //p3.color += float4(0, 0, 0.1, 1);
        Particles[neighborIndices.z] = p3;
    }*/
    //evalPressure(neighborIndices[0], index);
    //evalPressure(neighborIndices[1], index);
    //evalPressure(neighborIndices[2], index);
    //evalPressure(neighborIndices[3], index);

    current.color = float4(0.1*current.pressure/200, 0.1*current.pressure/200, 0.4, 1);
    Particles[index] = current;
}

bool stuff(int2 from, int2 to, Particle current, int xoffset, int yoffset) {
    int2 free1 = int2(from.x+xoffset, from.y+yoffset);
    const uint index = from.y * _Width + from.x;
    const uint freeIndex = free1.y * _Width + free1.x;
    float oldDist = distance(from, to);
    float newDist = distance(free1, to);
    if (Particles[freeIndex].type == 0 && newDist < oldDist) {
        Particles[index].color = float4(0, 0, 0, 1);
        Particles[index].type = 0;
        Particles[index].velocity = int2(0, 0);
        Particles[index].stickyToId = -1;

        Particles[freeIndex] = current;
        Particles[freeIndex].color = float4(0, 1, 1, 1);
        Particles[freeIndex].position = free1;
        Particles[freeIndex].velocity = int2(0, 0);

        return true;
    }
    return false;
}

bool atHighLimit(int2 from, int2 to, uint mass) {
    const uint len = length(to - from);
    const uint assumedArea = 3.14159 * len * len;

    return assumedArea > mass + 10000;
}

bool inCircle(int2 center, int2 border, int2 wanted) {
    const uint r = length(center - border);
    const uint d = sqrt((wanted.x-center.x)*(wanted.x-center.x)+(wanted.y-center.y)*(wanted.y-center.y));
    return r >= d;
}

void sort(inout int2 array[8], uint length, int2 center) { // Assume 16 is the maximum length for example purposes
    for (int i = 1; i < length; ++i) {
        float key = distance(array[i], center);
        int2 temp = array[i];
        int j = i - 1;

        while (j >= 0 && distance(array[j], center) > key) {
            array[j + 1] = array[j];
            j = j - 1;
        }
        array[j + 1] = temp;
    }
}

void neighbors(inout int2 array[8], int2 from) {
    array[0] = from + int2(0, 1);
    array[1] = from + int2(1, 0);
    array[2] = from + int2(1, 1);
    array[3] = from + int2(0, -1);
    array[4] = from + int2(-1, 0);
    array[5] = from + int2(-1, -1);
    array[6] = from + int2(1, -1);
    array[7] = from + int2(-1, 1);
}

/*
 * A. +-2 Ansatz probieren DONE
 *
 * B. Random Streuung Ansatz
 *
 * C.1. Radiusvolumen betrachten, wenn ein Nachbarpixel innerhalb Flächenvolumen leer, dann hin bewegen.
 * C.2. Erwarteter Kreisfächenvolumen durch Radius vergleichen mit tatsächlichem Flächenvolumen aus Masse.
 */
const uint allowedDifference = 50;
bool isHeightValid(uint index, Planet planet) {
    const Particle current = Particles[index];
    const uint mass = planet.mass;
    const uint dist = distance(current.position, planet.pos);
    const uint r = sqrt(mass / 3.14159265358979f);
    //if (r > dist - allowedDifference) return false;
    if (dist > r + allowedDifference) return false;
    /*if (median + allowedDifference < dist || dist < median - allowedDifference) {
        return false;
    }*/
    //const uint predArea = PI * dist * dist;
    //if (predArea <= mass + allowedDifference) {
    //    return true;
    //}
    return true;
}

bool getFarNeighbors(uint index) {
    Particle p;
    p = Particles[index - 1];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index + 1];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index - _Width];
    if (p.stickyToId != -1)
        return true;
    p = Particles[index + _Width];
    if (p.stickyToId != -1)
        return true;

    return false;
}

[numthreads(16, 16, 1)]
void CSFallSand(uint3 id : SV_DispatchThreadID)
{
    uint index = id.y * _Width + id.x;
    const Particle current = copy(Particles[index]);

    if (current.type == 1) {
        Particles[index].glowIntensity = 1.0;

        //Particles[index].mass += 1;
        /*if (id.y > _Width / 2) {
            //Particles[index].color.r += 0.1; // Increase redness
            Particles[index].glowIntensity = 1.0; // Set glow intensity
        }*/

        for (uint i = 0; i < _planetCount; i++) {
            if (planets[i].active == 0)
                break;

            float2 gravityPoint = planets[i].pos;

            float2 direction = gravityPoint - id.xy;
            float r = length(direction);
            float mass1 = current.mass;
            float mass2 = planets[i].mass;
            //float G = minG * planets[i].mass;
            const float G = 7 * 3;
            float forceMagnitude = G * mass1 * mass2 / (r * r);
            float2 forceDirection = normalize(direction);

            Particles[index].velocity += forceDirection * forceMagnitude * dt;
        }

        float maxSpeed = 10.0;
        if (length(Particles[index].velocity) > maxSpeed) {
            Particles[index].velocity = normalize(Particles[index].velocity) * maxSpeed;
            //Particles[index].color += float4(0,0,0.1,0);
        }

        Particle first = copy(Particles[index]);
        first.velocity = Particles[index].velocity;
        first.position = id.xy + first.velocity * dt;
        first.color = float4(0.1, 0.2, 0, 1);

        for (uint count = 0; count < 4; count++) {
            // Calculate the new position
            //int2 newPosition = first.position + first.velocity;
            //uint newPositionIndex = newPosition.y * _Width + newPosition.x;

            //float w = _Width;
            //float2 newPosition = first.position + first.velocity;
            //float f = newPosition.y * w + newPosition.x;
            //float f2 = floor(f);
            ////uint newPositionIndex = (uint)(floor(newPosition.y * (float)_Width + newPosition.x));
            //uint newPositionIndex = int(f2);

            //int2 newPosition = first.position + first.velocity;
            //uint newPositionIndex = (first.position.y + first.velocity.y) * _Width + (first.position.x + first.velocity.x);

            int2 newPosition = first.position + first.velocity;
            float2 newPositionFloat = first.position + first.velocity;
            uint newPositionIndex = newPosition.y * _Width + newPosition.x;

            Particle other = copy(Particles[newPositionIndex]);
            Particles[index].type = 0;
            Particles[index].color = float4(0, 0, 0, 1);

            if (other.type == 0) {
                Particles[newPositionIndex] = first;
                Particles[newPositionIndex].position = newPositionFloat;
                break;
            }

            Particle neighbour = findStickyNeightbour(newPositionIndex);

            if (other.stickyToId != -1 || neighbour.stickyToId != -1)
            {
                //if (length(first.velocity) < maxSpeed - 1 && first.mass == 1) {
                float2 vn = normalize(first.velocity);
                //float2 offsetPos = newPosition;
                int2 offsetPos = bresenham(newPosition, first.position);

                //for (; Particles[offsetPos.y * _Width + offsetPos.x].stickyToId != -1; offsetPos -= vn);
                uint offsetIndex = offsetPos.y * _Width + offsetPos.x;
                Particles[offsetIndex] = first;
                Particles[offsetIndex].stickyToId = other.stickyToId;
                Particles[offsetIndex].velocity = 0;
                Particles[offsetIndex].type = 2;
                Particles[offsetIndex].position = offsetPos;
                Particles[offsetIndex].neighbor.x = 2;
                Particles[offsetIndex].availableSlideFrames = 100;
                Particles[offsetIndex].pressure += 100;
                planets[other.stickyToId].mass++;

                if (length(first.velocity) > maxSpeed - 3 && first.stickyToId > -2) {
                    float r = first.mass * first.velocity / 2;
                    for (int dy = -r; dy <= r; dy++) {
                        for (int dx = -r; dx <= r; dx++) {
                            int2 checkPos = int2(first.position.x + dx, first.position.y + dy);
                            if (checkPos.x >= 0 && checkPos.x < _Width && checkPos.y >= 0 && checkPos.y < _Width) {
                                uint checkIndex = checkPos.y * _Width + checkPos.x;
                                Particle checkParticle = Particles[checkIndex];
                                float distance = length(float2(dx, dy));
                                if (distance <= r) {
                                    Particles[checkIndex].color = float4(1,1,1,1);
                                    const float f = (1.0 - distance / r) * checkParticle.glowIntensity;
                                    Particles[checkIndex].type = 1;
                                    Particles[checkIndex].stickyToId = -2;
                                    //Particles[checkIndex].color = float4(1, 0, 0, 1);
                                    Particles[checkIndex].pressure += 200;
                                    Particles[checkIndex].velocity = float2(((first.position.x + dx) / dx) % 6, ((first.position.y + dy) / dx) % 6);//float2((first.position.x + dx) * f, (first.position.y + dy) * f);

                                }
                            }
                        }
                    }
                }

                return;

            }

            // Improved collision resolution based on elastic collisions
            float2 relVelocity = first.velocity - other.velocity;
            float2 normal = normalize(other.position - first.position);

            float impulse = 100 * dt * 2.0 * other.mass / (first.mass + other.mass) * dot(relVelocity, normal);
            first.velocity -= impulse * normal;
            other.velocity += impulse * normal;

            first.pressure += 100;
            other.pressure += 100;

            first.color = float4(1, 1, 0, 1);

            Particles[newPositionIndex] = copy(first);
            first = other;
            index = newPositionIndex;
        }
    } else if (current.type == 2) {
        //updatePressure(index);
        const Particle newCurrent = copy(Particles[index]);
        const Planet planet = planets[newCurrent.stickyToId];
        const int2 from = id.xy;
        const int2 to = planet.pos;

        if (!hasStickyNeighbor(index)){
            Particle newp = free(current);
            Particles[index] = newp;
        } else if (Particles[index].lastUpdateFrame < _CurrentFrame && Particles[index].availableSlideFrames > 0) {
            int l = 2;
            for (int i=-l; i<=l; i++) {
                for (int j=-l; j<=l; j++) {
                    bool done = stuff(from, to,  newCurrent, i, j);
                    if (done) return;
                }
            }
            Particles[index].availableSlideFrames--;
        }
        /*} else if (newCurrent.falling == 1) {
            int l = 2;
            for (int i=-l; i<=l; i++) {
                for (int j=-l; j<=l; j++) {
                    bool done = stuff(from, to,  newCurrent, i, j);
                    if (done) return;
                }
            }
        } else if (Particles[index].neighbor.x > 0) {
            Particles[index].neighbor.x--;
            int l = 2;
            for (int i=-l; i<=l; i++) {
                for (int j=-l; j<=l; j++) {
                    bool done = stuff(from, to,  newCurrent, i, j);
                    if (done) return;
                }
            }
        }*/

        /*
        if (!hasStickyNeighbor(index)) {
            Particle newp = free(current);
            Particles[index] = newp;
        } else if (!isHeightValid(index, planet)) {
            int l = 2;
            for (int i=-l; i<=l; i++) {
                for (int j=-l; j<=l; j++) {
                    bool done = stuff(from, to,  current, i, j);
                    if (done) return;
                }
            }
        }*/
    } else if (Particles[index].type == 0) {
        if (Particles[index].lastUpdateFrame < _CurrentFrame) {
            Particles[index].color *= float4(0.9, 0.9, 0.9, 1);
            Particles[index].glowIntensity *= 0.9;
        }

    }
    if (Particles[index].lastUpdateFrame < _CurrentFrame){
        if (Particles[index].pressure > 0) Particles[index].pressure--;
    }
    Particles[index].lastUpdateFrame = _CurrentFrame;
}

[numthreads(16, 16, 1)]
void CSTransformToTexture (uint3 id : SV_DispatchThreadID) {
    uint index = id.y * _Width + id.x;
    Particle current = Particles[index];

    float g = 0.1;
    if (current.pressure > 0) g = 0;
    float4 defaultSpeedColor = float4(0.2, 0.1, 0, 0.3); // leak with g
    float factor = abs(current.velocity) * 0.7;
    float4 glowColor = defaultSpeedColor * factor; // yellow
    float glowRadius = max(2, abs(current.velocity) * 1.4);
    float4 accumulatedGlow = float4(0, 0, 0, 0);
    if (current.type >= 2) {
        //glowColor = float4(0,0,0,0);
        //glowRadius = 0;
    } else {
        for (int dy = -glowRadius; dy <= glowRadius; dy++) {
            for (int dx = -glowRadius; dx <= glowRadius; dx++) {
                int2 checkPos = int2(id.x + dx, id.y + dy);
                if (checkPos.x >= 0 && checkPos.x < _Width && checkPos.y >= 0 && checkPos.y < _Width) {
                    uint checkIndex = checkPos.y * _Width + checkPos.x;
                    Particle checkParticle = Particles[checkIndex];
                    float distance = length(float2(dx, dy));
                    if (distance <= glowRadius) {
                        float glowFactor = (1.0 - distance / glowRadius) * checkParticle.glowIntensity;
                        accumulatedGlow += glowColor * glowFactor;
                    }
                }
            }
        }
    }

    ResultTexture[id.xy] = current.color + accumulatedGlow;
}

